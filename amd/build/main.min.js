define(['jquery', 'core/modal_factory', 'core/templates', 'core/notification'],
        function($, ModalFactory, Templates, Notification) {

    var wwwroot = M.cfg.wwwroot;

    var $errorBox = null;

    $.custom_register = function(el, params) {
        var $custom_register = $(el);
        var $custom_registerBox;
        var $custom_registerSuggestions = $('<ul class="custom_register-suggestions"></ul>');
        var cacheResults = [];
        var requestObjects = [];
        var startRecord = 0;

        $custom_register.wrap('<span class="custom_register-box"></span>');

        $custom_registerBox = $custom_register.parent();
        $custom_registerBox.append($custom_registerSuggestions);

        $custom_registerSuggestions.customReset = function() {
            $custom_registerSuggestions.empty();
            $custom_registerSuggestions.hide();
            $custom_registerSuggestions.data('off', true);
        };

        $custom_registerSuggestions.customReset();

        if (params.options) {
            params.options = $.extend({}, $.custom_register.defaults.options, params.options);
        }

        if (params.events) {
            params.events = $.extend({}, $.custom_register.defaults.events, params.events);
        }

        if (params.results) {
            params.results = $.extend({}, $.custom_register.defaults.results, params.results);
        }

        $custom_register.conf = $.extend({}, $.custom_register.defaults, params);

        $custom_register.attr('autocomplete', 'off');

        var ferror = function(txt, level) {
            switch(level) {
                case 'dev':
                    $custom_register.conf.debug ? console.log('Custom registerSearch - ' + txt): true;
                break;
                default:
                    console.log('Custom registerSearch - ' + txt);
            }
        };

        $.data(el, "custom_register", $custom_register);

        var methods = {
            init: function() {
                if (!$custom_register.conf.apiuri) {
                    ferror('Configuration error: You need set the API URI.')
                    return;
                }

                $custom_register.on('keypress', function(event) {
                    if (event.keyCode) {
                        switch(event.keyCode) {
                            case 13: // Enter
                                event.preventDefault();
                                $custom_registerSuggestions.customReset();
                                break;
                            case 27: // Escape
                                $custom_registerSuggestions.customReset();
                                break;
                            case 38: // Up
                                if (!$custom_registerSuggestions.data('off')) {
                                    methods.previousItemMarkup();
                                }
                                break;
                            case 40: // Down
                                if (!$custom_registerSuggestions.data('off')) {
                                    methods.nextItemMarkup();
                                }
                                break;
                        }
                    }
                });

                $custom_register.on('keyup', function(event) {
                    var val = $custom_register.val();

                    var specialKeys = [13, 16, 17, 18, 27, 33, 34, 35, 36, 37, 38, 39, 45, 144];
                    if (!$custom_registerSuggestions.data('off')) {
                        specialKeys[specialKeys.length] = 40;
                    }

                    if (event.keyCode && specialKeys.indexOf(event.keyCode) == -1) {
                        if (val.length >= $custom_register.conf.options.minLetters) {
                            $custom_register.printSuggestions(val);
                        }
                        else {
                            $custom_registerSuggestions.customReset();
                        }
                    }
                    else if (event.keyCode === 13) {
                        $custom_register.search();
                    }
                });

                $custom_registerBox.on('focusout', function(event) {
                    window.setTimeout(function() { $custom_registerSuggestions.customReset(); }, 100);
                });
            },

            /**
            * Build a suggestion item
            * @param item the current item data to render
            * @param query the last query submited to the server.
            * */
            getItemMarkup: function(item, query, position) {
                var text = item.query != '' ? methods.highlightString(item.query, query) : '';

                var $item = $('<li>' + text + '</li>');

                $item.on('click', function(){
                    var $this = $(this);
                    $custom_registerSuggestions.customReset();
                    $custom_register.val($this.text());
                });

                return $item;
            },

            highlightString: function(str, query) {
                var n = str.toLowerCase().indexOf(query.toLowerCase());
                if (n >= 0) {
                    var before = str.substr(0, n);
                    var word   = str.substr(n, query.length);
                    var after  = str.substr(n + query.length);

                    str = before + '<em>' + word + '</em>' + after;
                }
                return str;
            },

            nextItemMarkup: function() {
                var $current = $custom_registerSuggestions.find('.current');
                var oldposition, newposition;

                if ($current.length < 1) {
                    oldposition = -1;
                }
                else {
                    oldposition = $current.index();
                }

                newposition = oldposition + 1;

                if ($custom_registerSuggestions.find('> li').length <= newposition) {
                    newposition = 0;
                }

                $current.removeClass('current');
                var $new = $custom_registerSuggestions.children().eq(newposition);

                $new.addClass('current');
                $custom_register.val($new.text());
            },

            previousItemMarkup: function() {
                var $current = $custom_registerSuggestions.find('.current');
                var oldposition, newposition;

                if ($current.length < 1) {
                    oldposition = -1;
                }
                else {
                    oldposition = $current.index();
                }

                newposition = oldposition - 1;

                if (newposition < 0) {
                    newposition = $custom_registerSuggestions.find('> li').length - 1;
                }

                $current.removeClass('current');
                var $new = $custom_registerSuggestions.children().eq(newposition);

                $new.addClass('current');
                $custom_register.val($new.text());
            },

            printItemsMarkup: function(title, data, query) {

                if (data.length > 0) {
                    $.each(data, function(k, item){
                        var $item = methods.getItemMarkup(item, query, k);
                        $custom_registerSuggestions.append($item);
                    });

                    $custom_registerSuggestions.show();
                    $custom_registerSuggestions.data('off', false);
                }
            },

            initSearch: function() {
                if (typeof($custom_register.conf.events.onstart) == 'function') {
                    $custom_register.conf.events.onstart(startRecord > 0);
                }
                else {
                    if ($custom_register.conf.results.target) {
                        $($custom_register.conf.results.target).addClass('loading');
                        if (startRecord === 0) {
                            $($custom_register.conf.results.target).empty()
                        }
                    }
                }
            },

            printResultSearch: function(data) {
                if (typeof($custom_register.conf.events.onfound) == 'function') {
                    $custom_register.conf.events.onfound(data, startRecord);
                }
                else {
                    if ($custom_register.conf.results.target) {
                        var $target = $($custom_register.conf.results.target);
                        $target.removeClass('loading');

                        $.each(data, function(k, item) {
                            var $html = $('<div class="customregister-video"></div>');
                            $html.append('<a href="' + item.about + '"><h5>' + item.metadata.general.title.none + '</h5></a>');
                            $html.append('<a href="' + item.about + '"><img src="' + item.about + '.img" /></a>');
                            $html.append('<p>' + item.metadata.general.description.none + '</p>');

                            $target.append($html);
                        });
                    }
                }
            },
        };

        $custom_register.printSuggestions = function(query) {
            var currentTime = Date.now();

            for (var request in requestObjects) {
                if (request && typeof request === 'object') {
                    request.abort();
                }
            }

            $custom_registerSuggestions.customReset();
            requestObjects = [];

            var uri = $custom_register.conf.apiuri;
            uri = uri.substr(0, uri.indexOf('/resources'));
            uri += '/queries.json';

            var params = {
                "q": query,
                "(n)": $custom_register.conf.options.suggestionsSize
            };

            if ($custom_register.conf.filters.length > 0) {
                var filters = $custom_register.conf.filters.join(' AND ');
                params.filter = filters;
            }

            // Not for specific catalogues yet.
            var cataloguename = '';
            requestObjects[requestObjects.length] = $.get(uri, params, function(data) {

                if (data.length > 0) {
                    data.sort(function(a, b){
                        return b.size - a.size;
                    });

                    methods.printItemsMarkup(cataloguename, data, query);
                }
            });
        };

        $custom_register.search = function() {

            var currentTime = Date.now();

            var query = $custom_register.val();

            if(query.length < $custom_register.conf.options.minLetters) {
                return false;
            }

            methods.initSearch();

            if (cacheResults[query] && cacheResults[query].timeQuery > (currentTime - $custom_register.conf.options.cacheLife)) {
                methods.printResultSearch(cacheResults[query].data);
                return true;
            }

            cacheResults[query] = {
                timeQuery: currentTime,
                data: []
            };

            var params = {
                "q": query,
                "(n)": $custom_register.conf.options.resultsSize,
                "(s)": startRecord
            };

            if ($custom_register.conf.filters.length > 0) {
                $.each($custom_register.conf.filters, function(k, filter) {
                    if (typeof(filter.value) == 'object') {
                        $.each(filter.value, function(m, val) {
                            params['(meta)[' + filter.meta + '][' + m + ']'] = val;
                        });
                    }
                    else {
                        params['(meta)[' + filter.meta + ']'] = val;
                    }
                });
            }

            $.ajax( {
                url: $custom_register.conf.apiuri,
                data: params,
                dataType: 'json',
                success: function(data) {
                    $custom_registerSuggestions.empty();

                    if (typeof $data === 'object' && $data.error) {
                        $custom_register.conf.events.onerror($data);
                        $data = [];
                    }

                    if (data.length > 0) {
                        data.sort(function(a, b) {
                            return b.size - a.size;
                        });

                        cacheResults[query].data = data;

                    }

                    methods.printResultSearch(data);
                },
                error: function(xhr) {
                    var data = xhr.responseText;
                    $custom_register.conf.events.onerror(jQuery.parseJSON(data));
                },
                fail: function(xhr) {
                    var data = xhr.responseText;
                    $custom_register.conf.events.onerror(jQuery.parseJSON(data));
                }
            });

        };

        $custom_register.searchMore = function() {
            startRecord += $custom_register.conf.options.resultsSize;
            $custom_register.search();
        };

        $custom_register.restart = function() {
            startRecord = 0;
        };

        //Custom register: Initialize
        methods.init();
    };

    //Custom register: Default Settings
    $.custom_register.defaults = {
        apiuri: null,
        catalogues: [],
        filters: [],
        options: {
            suggestionsSize: 10,
            resultsSize: 10,
            minLetters: 3,
            cacheLife: 60000 // 60 seconds
        },
        debug: false,
        results: {
            target: null,
            template: null
        },
        events: {
            onstart: null,
            onfound: null,
            onerror: function(error) {
                console.log('Custom registerSearch - search error');
                console.log(error);
                return true;
            }
        }
    };

    //Custom register: Plugin Function.
    $.fn.custom_register = function(params, paramval) {
        if (params === undefined) { params = {}; }
        if (typeof params === "object") {
            return this.each(function() {
                new $.custom_register(this, params);
            });
        }
        else {

            var $custom_register;

            if ('data' in this) {
                $custom_register = this.data('custom_register');
            } else {

                if ('data' in $(this)) {
                    $custom_register = $(this).data('custom_register');
                }
            }

            if ($custom_register) {

                switch (params) {
                    case "search": $custom_register.search(); break;
                    case "nextsearch": $custom_register.searchMore(); break;
                    case "option": return $custom_register.conf.options[paramval]; break;
                    case "restart": $custom_register.restart(); break;
                }
            } else {
                console.log('Error in custom_register object');
            }
        }
    };

    var chooseview = function(data) {

        var $res;
        if (data.metadata.technical && data.metadata.technical.format) {

            if (data.metadata.technical.format.match(/pdf/gi) ||
                    data.metadata.technical.format.match(/html/gi)) {
                $res = $('<iframe></iframe>');
                $res.attr('src', data.about + '/!/').attr('type', data.metadata.technical.format);

            } else {

                var src = '';
                if (data.manifest.alternate && data.manifest.entrypoint) {
                    var alterpath = data.about + '/!/.alternate/' + data.manifest.entrypoint + '/';

                    if (data.metadata.technical.format.match(/video/gi) ||
                            data.metadata.technical.format.match(/audio/gi) ||
                            data.metadata.technical.format.match(/image/gi)) {

                        var name = data.manifest.alternate.find(e => /small/g.test(e));

                        if (name) {
                            src = alterpath + name;
                        } else {
                            name = data.manifest.alternate.find(e => /medium/g.test(e));
                            if (name) {
                                src = alterpath + name;
                            } else {
                                src = data.about + '/!/' + data.manifest.entrypoint;
                            }
                        }
                    } else {
                        name = data.manifest.alternate.find(e => /thumb/g.test(e));
                        if (name) {
                            src = alterpath + name;
                        } else {
                            src = data.manifest.customicon;
                        }
                    }


                } else {
                    if ('technical' in data.manifest && 'format' in data.manifest.technical &&
                            (data.metadata.technical.format.match(/video/gi) ||
                            data.metadata.technical.format.match(/audio/gi) ||
                            data.metadata.technical.format.match(/image/gi))) {
                        src = data.about + '/!/';
                    } else {
                        src = data.manifest.customicon;
                    }
                }

                if (data.metadata.technical.format.match(/video/gi)) {
                    $res = $('<video controls><source></source></video>');
                    $res.find('source').attr('src', src).attr('type', data.metadata.technical.format);

                } else if (data.metadata.technical.format.match(/audio/gi)) {
                    $res = $('<audio controls><source></source></audio>');
                    $res.find('source').attr('src', src).attr('type', data.metadata.technical.format);

                } else {
                    $res = $('<img />');
                    $res.attr('src', src).attr('alt', data.metadata.general.title.none);
                }

            }

            return $res.get(0).outerHTML;
        }

        return $res;
    };

    var showmessage = function(text, type, info, asreturn) {
        type = type ?? 'error';
        info = info ?? '';

        var content = $('#customregister-tpl-error-item')[0].innerHTML;

        content = content.replace(/{message}/g, text);
        content = content.replace(/{info}/g, info);
        content = content.replace(/{type}/g, type);

        if (asreturn) {
            return content;
        } else {
            if ($errorBox) {
                $errorBox.html(content);
            } else {
                console.log(content);
            }
        }
    };

    var itemcontent = function(item) {

        var content = $('#customregister-tpl-item')[0].innerHTML;

        content = content.replace(/{title}/g, item.metadata.general.title.none);
        content = content.replace(/{about}/g, item.about);
        content = content.replace(/{description}/g, item.metadata.general.description.none);
        content = content.replace(/{comments}/g, item.social.comments);
        content = content.replace(/{score}/g, item.social.score.count ? item.social.score.sum + '/' + item.social.score.count : 0);
        content = content.replace(/{views}/g, item.social.views);

        return content;
    };

    /**
     * Initialise all for the block.
     *
     */
    var init = function(blockid, customregisteruri, pagesize, socialnetworks) {

        pagesize = pagesize ?? 10;

        $('#' + blockid).each(function(i, v) {
            var $_this = $(this);
            var $searchResult = $_this.find('[data-control="search-result"]');
            var $customregister = $_this.find('[data-control="search-text"]');

            $errorBox = $_this.find('[data-control="errors-box"]');

            $_this.find('[data-control="search-button"]').on('click', function(){
                $_this.find('> .search-result').empty();
                $customregister.custom_register('restart');
                $customregister.custom_register('search');
            });

            $customregister.custom_register({
                apiuri: customregisteruri,
                catalogues: [],
                filters: [],
                options: {
                    cacheLife: 2000,
                    suggestionsSize: pagesize
                },
                events: {
                    onstart: function(more) {
                        $searchResult.addClass('loading');
                        $searchResult.show();

                        if (!more) {
                            $searchResult.find('> .customregister-content').empty();
                        }
                    },
                    onfound: function(data, start) {

                        console.log('Encontrados: ' + data.length + ' resultados');

                        $searchResult.removeClass('loading');
                        var $target = $searchResult.find('> .customregister-content');

                        var resultsSize = $customregister.custom_register('option', 'resultsSize');

                        if (data.length === 0 || data.length < resultsSize) {
                            $searchResult.find('> button').hide();
                        }
                        else {
                            $searchResult.find('> button').show();
                        }

                        if (start == 0) {
                            $_this.find('[data-control="show-one"]').empty();
                        }

                        if ((!data || data.length === 0) && start == 0) {
                            $target.empty();

                            var content = showmessage('No se encontraron resultados', 'error', '', true);

                            $target.append(content);
                            return;
                        }

                        $.each(data, function(k, item) {
                            if (item.manifest.conexion_type == 'external') {
                                item.finaluri = item.manifest.url;
                            }
                            else {
                                item.finaluri = item.about + '/!/';

                                if (item.manifest.entrypoint) {
                                    item.finaluri += item.manifest.entrypoint;
                                }
                            }

                            var $item = $(itemcontent(item));
                            $item.appendTo($target);

                            $item.find('[customregister-href]').on('click', function(element) {
                                var $this = $(this);

                                var modalresource = $this.data('modal');

                                if (modalresource) {
                                    modalresource.show();
                                    return;
                                }

                                var request = $.get($this.attr('customregister-href'))
                                    .then(function( data, textStatus, jqXHR ) {

                                        data.custom = {};
                                        data.custom.preview = chooseview(data);
                                        data.custom.type = (data.metadata.technical && data.metadata.technical.format) ?
                                                                data.metadata.technical.format : '';
                                        data.custom.score = 'avg' in data.social.score ?
                                                                data.social.score.avg + ' / ' + data.social.score.count : 0;

                                        $.each(socialnetworks, function(i, v) {
                                            v.url = v.url.replace('{url}', encodeURI(data.about + '/!/'));
                                            v.url = v.url.replace('{name}', data.metadata.general.title.none);
                                        });

                                        data.custom.socialnetworks = socialnetworks;

                                        data.custom.alternates = [];
                                        $.each(data.manifest.alternate, function(i, alt) {
                                            var str;
                                            var strkey = 'alternate_' + alt.substring(0, alt.indexOf('.'));

                                            if (strkey in M.str.block_custom_register) {
                                                str = M.str.block_custom_register['alternate_' + alt.substring(0, alt.indexOf('.'))];
                                            } else {
                                                str = alt;
                                            }

                                            var one = {
                                                "text": str,
                                                "url": data.about + '/!/.alternate/' + data.manifest.entrypoint + '/' + alt
                                            }

                                            data.custom.alternates[data.custom.alternates.length] = one;
                                        });

                                        var template = Templates.render('block_custom_register/viewresource', data)
                                            .then(function(html, js) {
                                                modalresource.setTitle(data.metadata.general.title.none);

                                                var $html = $(html);

                                                $html.find('[customregister-act="rate"]').on('click', function() {
                                                    var $rate = $(this);

                                                    var params = { value: $rate.data('value') };

                                                    $.post(data.about + '/scores', params, function(data) {})
                                                        .done(function() {
                                                            $html.find('[customregister-act="rate"]').removeClass('active').each(function(key, element) {
                                                                var $element = $(element);

                                                                if ($element.data('value') <= $rate.data('value')) {
                                                                    $element.addClass('active');
                                                                }
                                                            });
                                                        }
                                                    );

                                                });

                                                return $html;
                                            });

                                        return template.promise();
                                    }
                                );

                                var clickedLink = $(element.currentTarget);
                                ModalFactory.create({
                                    body: request.promise()
                                })
                                .then(function(modal) {
                                    modalresource = modal;
                                    modal.getModal().addClass('block_custom_register-modal');
                                    modal.show();

                                    $this.data('modal', modalresource);
                                });

                            });
                        });
                    },
                    onerror: function(error) {
                        var $target = $errorBox;
                        $target.empty();

                        var $node = showmessage(error.message, 'error', error.info, true);
                        $target.append($node);

                        $node.find('button.close').on('click', function() {
                            $node.remove();
                        });

                        console.log(error)

                        $target.removeClass('loading');
                    }
                }
            });

            $searchResult.find('> button').on('click', function(){
                $customregister.custom_register('nextsearch');
            });

        });

    };

    return {
        init: init
    };
});
